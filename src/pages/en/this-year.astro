---
import i18next, { changeLanguage, t } from "i18next";
import Layout from "@layouts/Layout.astro";
import { HPTypography } from "@components/hp-typography";
import { HPMonth } from "@components/hp-month";
import type { GoogleEvent } from "@data/get-calendar-events";
import getCalendarEvents from "@data/get-calendar-events";
import { sortCalendarEvents } from "@utilities/sort-calendar-events";
import { filterOutUnofficialCalendarEvents } from "@utilities/filter-out-unofficial-calendar-events";
import { transformToThisYearData } from "@utilities/transform-to-this-year-data";
import { addExtraProperties } from "@utilities/add-extra-properties";

changeLanguage("en");

const currentYear = new Date().getFullYear();
const { data, error } = await getCalendarEvents({ fromYear: currentYear, toYear: currentYear + 1 });
const listOfficial = addExtraProperties(filterOutUnofficialCalendarEvents(sortCalendarEvents(data)));
const listYear = transformToThisYearData(listOfficial, currentYear);
---
<Layout title={`${currentYear} - ${t('PAGES.THIS_YEAR.TITLE')}`}>
  <HPTypography element="h2" appearance="h1">{currentYear} - {t('PAGES.THIS_YEAR.TITLE')}</HPTypography>

  {error ? (
    <HPTypography appearance="h3" font="primary">Има проблем!</HPTypography>
  ) : (
    <>
      {listYear.map((events: GoogleEvent[], index: number) => {
        // Accommodate January next year
        const indexAdjusted = index < 12 ? index : 0;
        const yearAdjusted = index < 12 ? currentYear : currentYear + 1;
        const monthName = new Intl.DateTimeFormat(i18next?.language, { month: "long" }).format(new Date(1, indexAdjusted));

        return (
          <div class="section">
            <HPTypography appearance="h3" font="primary">{monthName || '-'}</HPTypography>

            {Array.isArray(events) && events.length > 0
              ? <div class="section-grid">
                  <div class="section-grid-column">
                    <HPMonth
                      index={indexAdjusted}
                      year={yearAdjusted}
                      name={monthName}
                      holidays={[...new Set(events.map((event: GoogleEvent) => parseInt(event.start.date.substring(8, 10), 10)))]}
                    />
                  </div>

                  <div class="section-grid-column">
                    {events.map((event: GoogleEvent) => {
                      return <HPTypography>{event.start.displayDate} - {event.displaySummary}</HPTypography>
                    })}
                  </div>
                </div>
              : (
                <HPTypography>{`:(`}</HPTypography>
              )}
          </div>
        );
      })}
    </>
  )}
</Layout>

<style>
  .section {
    padding-bottom: var(--space-size-x2);
  }

  @media (min-width: 700px) {
    .section-grid {
      display: flex;
      flex-wrap: wrap;
      margin: var(--space-size) calc(var(--space-size-x2) * -1);
    }

    .section-grid-column {
      box-sizing: border-box;
      width: 50%;
      padding: var(--space-size-x2);
    }
  }

  hp-month {
    --hp-month-th-border-color: var(--palette-complimentary);
    --hp-month-td-border-color: transparent;
    --hp-month-weekend-color: #aaa;
    --hp-month-pre-post-color: #aaa;

    min-width: 300px;
    box-sizing: border-box;
    font-family: var(--font-family-primary);
    padding: var(--space-size);
    margin-bottom: var(--space-size-x2);
    background: var(--palette-dominant);
    border: 1px solid var(--palette-complimentary);
    color: var(--palette-complimentary);
  }
</style>
