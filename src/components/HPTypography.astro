---
export interface Props {
  element?: "h1" | "h2" | "h3" | "h4" | "h5" | "p" | "small";
  appearance?: "h1" | "h2" | "h3" | "h4" | "h5" | "p" | "small";
  font?: "primary" | "secondary";
  lineHeight?: string;
  disableMarginBottom?: boolean;
  style?: string;
  styles?: Record<string, string>;
}

const {
  element = "p",
  appearance = "p",
  font,
  lineHeight,
  disableMarginBottom = false,
  style = "",
  styles = {},
  ...rest
} = Astro.props;

const headlineElementList = ["h1", "h2", "h3", "h4", "h5"];

const inlineStyles = {
  ...styles,
  ...(lineHeight && { lineHeight }),
};

const styleString = Object.entries(inlineStyles)
  .map(([key, value]) => `${key}: ${value}`)
  .join("; ");

const Element = element;
---

<Element
  {...rest}
  class:list={[
    appearance,
    { [`font-${font}`]: Boolean(font) },
    { headline: headlineElementList.includes(appearance) },
    { "margin-bottom": !disableMarginBottom },
  ]}
  style={`${styleString} ${style}`}
>
  <slot />
</Element>

<style>
  * {
    padding: 0;
    margin: 0;
    outline: 0;
    letter-spacing: 0.3px;
  }

  /* Scheme: 1.333 - Perfect fourth */
  .headline {
    font-family: var(--font-family-secondary);
    font-weight: 400;
    line-height: 1;
  }

  .h1 {
    margin-top: 0;
    font-size: var(--font-size-h1);
  }
  .h2 {
    font-size: var(--font-size-h2);
  }
  .h3 {
    font-size: var(--font-size-h3);
  }
  .h4 {
    font-size: var(--font-size-h4);
  }
  .h5 {
    font-size: var(--font-size-h5);
  }
  .p {
    font-family: var(--font-family-primary);
    font-size: var(--font-size-p);
    line-height: 1.3;
  }
  .small {
    font-size: var(--font-size-small);
    line-height: 1.3;
  }

  .font-primary {
    font-family: var(--font-family-primary);
  }

  .font-secondary {
    font-family: var(--font-family-secondary);
  }

  .margin-bottom {
    margin-bottom: 0.4em;
  }
  .margin-bottom.h1 {
    margin-bottom: 0.6em;
  }
</style>
