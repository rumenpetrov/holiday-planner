---
import i18next, { t } from "i18next";
import { HPTypography } from "@components/hp-typography";
import { HPMonth } from "@components/hp-month";
import type { GoogleEvent } from "@data/get-calendar-events";
import getCalendarEvents from "@data/get-calendar-events";
import { sortCalendarEvents } from "@utilities/sort-calendar-events";
import { filterOutUnofficialCalendarEvents } from "@utilities/filter-out-unofficial-calendar-events";
import { transformToThisYearData } from "@utilities/transform-to-this-year-data";
import { addExtraProperties } from "@utilities/add-extra-properties";
import CalendarDecoration from "./CalendarDecoration.astro";

export interface Props {
  year: number;
  class?: string;
}

const { year, class: className } = Astro.props;

const { data, error } = await getCalendarEvents({
  fromYear: year,
  toYear: year + 1,
  locale: i18next.language,
  toNextJanuary: true,
});
const listOfficial = addExtraProperties(
  filterOutUnofficialCalendarEvents(sortCalendarEvents(data)),
  i18next.language,
);
const listYear = transformToThisYearData(listOfficial, year);
---

<div class:list={[className]}>
  <div class="page-header" aria-hidden="true">
    <div class="page-header-content">
      <span class="page-header-year">
        <slot name="year" />
      </span>
      <slot name="title" />
    </div>

    <div class="page-header-decoration">
      <CalendarDecoration />
    </div>
  </div>

  {
    error ? (
      <HPTypography client:visible appearance="h3" font="primary">
        {t("GLOBAL.ERROR")}
      </HPTypography>
    ) : (
      <div class="timeline" role="region" aria-labelledby="timeline-title">
        <h2 hidden id="timeline-title">
          {t("GLOBAL.TIMELINE.LABEL")}
        </h2>

        <button class="button" id="export-markdown" hidden>
          {t("GLOBAL.EXPORT_AS_MARKDOWN")}
        </button>

        <div class="legend" role="region" aria-hidden="true">
          <HPTypography client:visible appearance="h5" font="primary">
            {t("GLOBAL.LEGEND.TITLE")}
          </HPTypography>

          <dl>
            <div class="legend-row">
              <dt
                class="legend-preview"
                style={{
                  backgroundColor: "var(--block-calendar-holiday-background)",
                }}
              >
                {t("GLOBAL.LEGEND.HOLIDAY")}
              </dt>
              <dd>{t("GLOBAL.LEGEND.HOLIDAY")}</dd>
            </div>

            <div class="legend-row">
              <dt
                class="legend-preview"
                style={{
                  backgroundColor:
                    "var(--block-calendar-suggestion-background)",
                }}
              >
                {t("GLOBAL.LEGEND.SUGGESTION")}
              </dt>
              <dd>{t("GLOBAL.LEGEND.SUGGESTION")}</dd>
            </div>
          </dl>
        </div>

        {listYear.map((events: GoogleEvent[], index: number) => {
          // Accommodate January next year
          const indexAdjusted = index < 12 ? index : 0;
          const yearAdjusted = index < 12 ? year : year + 1;
          const monthName = new Intl.DateTimeFormat(i18next?.language, {
            month: "long",
          }).format(new Date(1, indexAdjusted));

          return (
            <section class="section" aria-labelledby={`month-title-${index}`}>
              <div class="timeline-point">
                <h3 hidden>{monthName}</h3>

                <HPTypography
                  client:visible
                  appearance="h4"
                  font="primary"
                  style="text-transform: capitalize"
                  disableMarginBottom
                  id={`month-title-${index}`}
                >
                  {monthName || "-"}
                </HPTypography>
              </div>

              <div class="section-grid">
                <div class="section-grid-column" aria-hidden="true">
                  <div class="timeline-point-link">
                    <HPMonth
                      index={indexAdjusted}
                      year={yearAdjusted}
                      holidays={[
                        ...new Set(
                          events.map((event: GoogleEvent) =>
                            parseInt(event.start.date.substring(8, 10), 10),
                          ),
                        ),
                      ]}
                      locale={i18next.language}
                      client:load
                    />
                  </div>
                </div>

                {Array.isArray(events) && events.length > 0 ? (
                  <div class="section-grid-column">
                    <div class="events">
                      {events.map((event: GoogleEvent) => {
                        return (
                          <div class="events-item">
                            <h4 hidden>
                              {event.start.displayDate} - {event.displaySummary}
                            </h4>
                            <HPTypography client:visible disableMarginBottom>
                              {event.start.displayDate} - {event.displaySummary}
                            </HPTypography>
                          </div>
                        );
                      })}
                    </div>
                  </div>
                ) : (
                  <div class="section-grid-column">
                    <HPTypography client:visible>{`:(`}</HPTypography>
                  </div>
                )}
              </div>
            </section>
          );
        })}
      </div>
    )
  }
</div>

<style>
  .page-header {
    position: relative;
    z-index: 1;
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    padding: var(--space-size-800) 0;
    margin-bottom: var(--space-size-800);
  }

  .page-header::before {
    content: "";
    position: absolute;
    top: 0;
    bottom: 0;
    left: 50%;
    transform: translate3d(-50%, 0, 0);
    z-index: -1;
    width: 100vw;
    background-color: var(--palette-secondary);
    border-width: 0 0 var(--space-size-100) 0;
    border-style: solid;
    border-color: var(--palette-primary);
  }

  .page-header-year {
    position: relative;
    display: inline-flex;
    justify-content: center;
    align-items: center;
    padding: var(--space-size-100) var(--space-size-200);
    background-color: var(--palette-primary);
    color: var(--palette-primary-contrast);
    margin: var(--space-size-100) var(--space-size-200) var(--space-size-400)
      var(--space-size-200);
  }

  .page-header-year::before {
    content: "";
    position: absolute;
    top: calc(100% + var(--space-size-100));
    right: calc(-1 * var(--space-size-100));
    left: calc(-1 * var(--space-size-100));
    height: var(--space-size-100);
    background-color: var(--palette-primary);
  }

  .page-header-content {
    flex: 1 1 auto;
    display: flex;
    flex-wrap: wrap;
  }

  .page-header-decoration {
    display: none;
  }

  @media (min-width: 960px) {
    .page-header-content {
      flex-basis: 70%;
    }

    .page-header-decoration {
      display: block;
      flex: 1 1 30%;
    }
  }

  .legend {
    padding-bottom: var(--space-size-400);
  }

  .legend-row {
    display: flex;
    align-items: center;
    margin-bottom: var(--space-size-100);
  }

  .legend-preview {
    display: inline-block;
    width: 2em;
    height: 1em;
    margin-right: var(--space-size-100);
    overflow: hidden;
    text-indent: 100%;
    background-color: gray;
  }

  .section {
    padding-bottom: var(--space-size-700);
  }

  @media (min-width: 700px) {
    .section-grid {
      display: flex;
      flex-wrap: wrap;
      margin: calc(var(--space-size-400) * -1);
    }

    .section-grid-column {
      box-sizing: border-box;
      width: 50%;
      padding: var(--space-size-400);
    }
  }

  .button {
    border: 0;
    padding: var(--space-size-200) var(--space-size-400);
    margin-bottom: var(--space-size-600);
    background-color: var(--palette-secondary);
    color: var(--palette-secondary-contrast);
    cursor: pointer;
  }

  .timeline {
    position: relative;
    z-index: 1;
    padding: 0 var(--space-size-600);
  }

  .timeline::before {
    content: "";
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    width: var(--space-size-100);
    background-color: var(--block-calendar-timeline-color);
  }

  .timeline-point {
    position: relative;
    display: inline-flex;
    margin-bottom: var(--space-size-600);
  }

  .timeline-point::before {
    position: absolute;
    top: 100%;
    left: calc(-1 * var(--space-size-600));
    content: "";
    width: calc(100% + (var(--space-size-600) * 2));
    border-width: 0 0 var(--space-size-100) 0;
    border-style: solid;
    border-color: var(--block-calendar-timeline-color);
    margin: var(--space-size-100) 0;
  }

  .timeline-point-link {
    position: relative;
  }

  .timeline-point-link::before,
  .timeline-point-link::after {
    content: "";
    position: absolute;
    right: 100%;
    width: var(--space-size-600);
    height: var(--space-size-100);
    background-color: var(--block-calendar-timeline-color);
  }

  .timeline-point-link::before {
    top: var(--space-size-400);
  }

  .timeline-point-link::after {
    bottom: var(--space-size-400);
  }

  hp-month {
    box-sizing: border-box;
    min-width: 300px;
    font-family: var(--font-family-primary);
    padding: var(--space-size-200);
    margin-bottom: var(--space-size-400);
    border: none;
    outline-width: calc(var(--space-size-100) / 2);
    outline-style: dashed;
    outline-color: var(--block-calendar-timeline-color);
    border-radius: 0;
  }

  .events {
    padding: var(--space-size-400) 0;
  }

  .events-item {
    border-bottom: calc(var(--space-size-100) / 2) dotted
      var(--palette-dominant-contrast);
    margin-bottom: var(--space-size-200);
  }
</style>

<script define:vars={{ listYear, year }}>
  // document.addEventListener('astro:page-load', () => {
  const exportAsMarkdownElement = document.querySelector("#export-markdown");
  const requiredFeaturesAvailable =
    typeof window === "object" &&
    "showSaveFilePicker" in window &&
    typeof window?.showSaveFilePicker === "function";

  const getTotalDays = (y, m) => new Date(y, m, 0).getDate();
  const isWeekend = (y, m, d) => {
    const dayOfWeek = new Date(y, m, d).getDay();

    return dayOfWeek === 6 || dayOfWeek === 0;
  };

  const prepareData = () => {
    return listYear.map((item, idx) => {
      if (idx >= 0 && idx <= 11) {
        return {
          totalDays: getTotalDays(year, idx + 1),
          month: idx + 1,
          events: item.map((listItem) => listItem.start.date),
        };
      }

      return {
        totalDays: getTotalDays(year + 1, 1),
        month: 1,
        events: item.map((listItem) => listItem.start.date),
      };
    });
  };

  const generateTable = (props) => {
    const { totalDays, month, events } = props;

    const headingsLine = Array.from({ length: totalDays })
      .map((_, idx) => `${idx + 1}`)
      .join("|");
    const dividerLine = Array.from({ length: totalDays })
      .map((_, idx) => `-`)
      .join("|");
    const eventsLine = Array.from({ length: totalDays })
      .map((_, idx) => {
        const dayAsText = idx + 1 < 10 ? `0${idx + 1}` : idx + 1;
        const monthAsText = month < 10 ? `0${month}` : month;
        const currentDateAsString = `${year}-${monthAsText}-${dayAsText}`;
        const isPublicHoliday = events.includes(currentDateAsString);
        const isWeekendOut = isWeekend(...currentDateAsString.split("-"));

        if (isWeekendOut) {
          return "x";
        }

        if (isPublicHoliday && !isWeekendOut) {
          return "✓";
        }

        return " ";
      })
      .join("|");

    return `## ${month}\n|${headingsLine}|\n|${dividerLine}|\n|${eventsLine}|`;
  };

  const generateYear = (data) => {
    const outputDraft = data.map((item) => generateTable(item)).join("\n\n");

    return `# ${year}\n${outputDraft}`;
  };

  const saveFile = async () => {
    const fileOptions = {
      suggestedName: `${year}-holidays-export.md`,
      types: [
        {
          accept: { "text/markdown": [".md"] },
        },
      ],
    };
    const handle = await window.showSaveFilePicker(fileOptions);
    const writableStream = await handle.createWritable();

    const nextValue = prepareData();
    const fileContent = generateYear(nextValue);

    await writableStream.write(fileContent);
    await writableStream.close();
  };

  if (requiredFeaturesAvailable) {
    exportAsMarkdownElement?.removeAttribute("hidden");
  }

  exportAsMarkdownElement?.addEventListener("click", () => {
    if (requiredFeaturesAvailable) {
      saveFile();
    }
  });
  // });
</script>

<script>
  customElements.whenDefined("hp-month").then(() => {
    document.querySelectorAll("hp-month:defined").forEach((monthElement) => {
      setTimeout(() => {
        monthElement.now = Date.now().toString();
      }, 1000);
    });
  });
</script>
